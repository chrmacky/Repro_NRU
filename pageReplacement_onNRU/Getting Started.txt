Getting Started

Um das Paging für NRU zu starten wird eine run.txt mit beschriebenen Prozessen vorrausgesetzt. Auch die processes.txt mit all den Prozessen die in der run.txt aufgeführt werden, muss darin mit ihrer Größe enthalten sein. Für eine eigene Abarbeitung von Prozesses muss die Datei eine Zeit, die Prozessnummer und eine Aktion beinhalten. Wird in der run.txt ein Prozess aufgeführt, der eine Seite lesen oder schreiben soll, die über seine eigentliche Größe hinausgeht, bricht das Programm ab. Da kein Prozess über seine eigentliche Größe hinaus Speicher reservieren kann. 
Es ist auch mögiche eine zufällige Abarbeitung des jeweiligen Seitenersetzungsalgorithmus durchzuführen. Dazu muss in der global.h der #define RUN_FILENAME "" ein Leerstring enthalten. Es kann hier über #define MEMORYSIZE 4 die Größe der zur Verfügung stehenden Frames beschrieben werden. Initial ist dieser Wert auf 4 eingestellt. 
Die ausführbare Datei ist im Debug Ordner zu finden, in ihm müssen auch die run.txt und die processes.txt liegen.

Beispiel:
run.txt
# <time> <PID> <action> <action> ...          
#	S for start
# 	E for end i.e. termination of the process, yielding in freeing all occupied frames
#	<no> use of the page with the given number
# file must be ordered by ascending time stamps
10 1 S 
12 1 W0
20 2 S
25 2 R2
30 2 W1
40 2 R1
45 1 E
55 2 R3

processes.txt
# <PID> <size>   ; number of entries on process table given by largest PID
1 4
2 8


das Verhalten
Die Memorysize ist auf 4 eingestellt.
Ab Zeiteinheit 10 wird der Prozess 1 gestartet und in Abhängigkeit seiner Größe freie Frames zugewiesen. In diesem Fall werden ihm 2 freie Frames aus dem Globalenpool zugewiesen. In Zeiteinheit 12 möchte der Prozess auf seine Seite 0 schreiben. Da diese noch nicht enthalten ist, wird es hier einen pagefault geben und die Seite anschließend in den Frame 0 eingelagert. Hierbei wird das r-bit und m-bit auf TRUE gesetzt. In Zeiteinheit 20 wird der Prozess 2 gestartet und auch hier in Abhängigkeit seiner Größe und der noch zur Verfügung stehenden freien Frames, Frames zugewiesen, in diesem Fall wird dem Prozess die letzten beiden freien Frames zugeteilt. Ab diesem Zeitpunkt können keine weiteren Prozesse gestartet werden, da kein freier Speicherplatz mehr zur Verfügung steht. Erst wenn ein Prozess beendet wird, können die nachfolgenden wieder starten und Speicher zugesichert bekommen.
In Zeiteinheit 25 liest der Prozess die Seite 2 und muss diese in den Speicher einlagern, da er diese noch nicht benutzt hat. 
In Zeiteinheit 30 schreibt der Prozess 2 auf seine Seite 1 und muss auch diese erst einlagern, da dies zuvor ein pagefault verursacht. 
In Zeiteinheit 40 liest der Prozess seine zuvor eingelagerte Seite 1 und kann sie aus dem Speicher lesen, da er diese zuvor eingelagert hatte. 
In Zeiteinheit 45 wird der Prozess 1 beendet, dabei gibt er den vom OS bereitgestellten Speicher wieder an ihm zurück, so dass neu gestartete Prozesse wieder Speicher zugeteilt werden können.
In Zeiteinheit 50 werden alle R-Bits aller Prozesse zurück gesetzt.
In Zeiteinheit 55 liest der Prozess 2 seine Seite 3 und merkt das er diese nicht zur Verfügung hat und muss nun von seinen zuvor eingelagerten Seiten 1 und 2 eine auswählen die er ersetzen kann. Er ersetzt seine Seite 2 durch die Seite 3, da diese nicht referenziert und modifiziert wurde. Seite 1 wurde zuvor durch das schreiben modifiziert. 